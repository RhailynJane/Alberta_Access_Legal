@startuml Lawyer Validation - Database Schema
<style>
' Professional Light Theme Configuration - Pure CSS Style
!$color_bg = "#ffffff"
!$color_bg_light = "#f8f9fa"
!$color_bg_lighter = "#e9ecef"
!$color_fg = "#212529"
!$color_fg_muted = "#6c757d"
!$color_primary = "#0066cc"
!$color_primary_light = "#4da6ff"
!$color_success = "#28a745"
!$color_warning = "#856404"
!$color_error = "#dc3545"
!$color_accent = "#6f42c1"

' Root document styling
document {
  BackGroundColor: $color_bg;
  FontColor: $color_fg;
  FontName: "Segoe UI", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", Arial, sans-serif;
  FontSize: 11;
}

' Entity styling
entity {
  BackGroundColor: $color_bg_light;
  LineColor: $color_primary;
  FontColor: $color_fg;
  FontSize: 10;
  LineThickness: 2;
  RoundCorner: 8;
  Padding: 8;
}

' Package styling
package {
  BackGroundColor: $color_bg_lighter;
  LineColor: $color_accent;
  FontColor: $color_fg;
  FontSize: 11;
  LineThickness: 2;
  RoundCorner: 8;
}

' Arrow styling
arrow {
  LineColor: $color_success;
  FontColor: $color_warning;
  FontSize: 9;
  LineThickness: 2;
}

' Note styling
note {
  BackGroundColor: $color_bg_lighter;
  LineColor: $color_accent;
  FontColor: $color_fg;
  FontSize: 9;
  LineThickness: 1;
  RoundCorner: 6;
  Padding: 6;
}
</style>

title Lawyer Attestation System - Database Schema & Relationships

package "Core User Management" as UserCore {
  entity "👤 users" as Users {
    _id : Id<"users"> <<PK>>
    ====
    name : string?
    image : string? 
    email : string?
    emailVerificationTime : number?
    phone : string?
    phoneVerificationTime : number?
    isAnonymous : boolean?
    ====
    userType : "lawyer" | "end-user" | "admin" <<Required>>
    ====
    firstName : string?
    lastName : string?
    gender : "male" | "female" | "other" | "prefer-not-to-say"?
    dateOfBirth : string?
    legalNeed : string?
    ====
    location : object?
    consent : object?
    lifecycle : object?
    privacyPrefs : object?
    ====
    hasSpouse : boolean?
    hasChildren : boolean?
    employmentStatus : string?
    incomeRange : string?
    legalAreas : string[]?
    urgencyLevel : "urgent" | "soon" | "flexible"?
    legalMatterDescription : string?
    lawyerGenderPreference : "male" | "female" | "no-preference"?
  }
}

package "Professional Attestation System" as AttestationCore {
  entity "⚖️ attestations" as Attestations {
    _id : Id<"attestations"> <<PK>>
    userId : Id<"users"> <<FK>>
    ====
    legalName : string <<Required>>
    barNumber : string <<Required>>
    ====
    isLicensed : boolean <<Required = true>>
    isInGoodStanding : boolean <<Required = true>>
    noDisciplinaryActions : boolean <<Required = true>>
    profileAccurate : boolean <<Required = true>>
    willUpdateOnChange : boolean <<Required = true>>
    understandsLiability : boolean <<Required = true>>
    ====
    attestationText : string?
    attestationVersion : string? = "1.0"
    ipAddress : string?
    digitalSignature : string?
    ====
    lsaVerified : boolean?
    attestedAt : number <<Auto-generated>>
    _creationTime : number <<Auto>>
  }
}

package "Extended Lawyer Information" as LawyerCore {
  entity "🏛️ lawyerProfiles" as LawyerProfiles {
    _id : Id<"lawyerProfiles"> <<PK>>
    userId : Id<"users"> <<FK>>
    ====
    barNumber : string?
    yearsOfExperience : number?
    firm : string?
    bio : string?
    hourlyRate : number?
    ====
    practiceAreas : string[]?
    courts : string[]?
    ====
    matchingCriteria : object?
    ====
    verified : boolean?
    active : boolean?
  }
}

package "Compliance & Audit Trail" as ComplianceCore {
  entity "📋 consentAuditLog" as AuditLog {
    _id : Id<"consentAuditLog"> <<PK>>
    userId : Id<"users"> <<FK>>
    ====
    event : union <<Required>>
    version : string <<Required>>
    timestamp : number <<Required>>
    ipAddress : string?
    userAgent : string?
    ====
    metadata : any?
  }
}

' Relationships - Primary Foreign Keys
Users ||--o{ Attestations : "userId"
Users ||--o{ LawyerProfiles : "userId"
Users ||--o{ AuditLog : "userId"

' Conceptual relationships
Attestations }o--o{ LawyerProfiles : "Professional\nVerification"
Attestations ||--o{ AuditLog : "Tracks attestation\nevents"

note top of Users
  👤 Users Table - Central Identity
  
  Key Features:
  • 🔐 Convex Auth integration
  • 🎭 Role-based access (lawyer/end-user/admin)
  • 📋 PIPA/PIPEDA compliant consent tracking
  • ⚖️ Specialized lawyer onboarding fields
  • 🏠 Row-level security via userId
  
  Indexes:
  • email, by_phone, by_userType
  • by_deletion (for GDPR compliance)
end note

note right of Attestations
  ⚖️ Attestations Table - Professional Verification
  
  Key Features:
  • 🏛️ LSA integration for bar number verification
  • ✅ All professional confirmations required = true
  • 📝 Digital attestation with IP tracking
  • 🔄 Support for updates (isUpdate logic)
  • 📊 Complete audit trail via consentAuditLog
  
  Indexes:
  • by_user (userId) - row-level security
  • by_barNumber - uniqueness & LSA lookup
  • by_lsaVerified - verification status queries
end note

note bottom of LawyerProfiles
  🏛️ Lawyer Profiles - Extended Information
  
  Key Features:
  • 📋 Detailed professional information
  • 🔍 Matching criteria for client discovery
  • ✅ Verification status independent of attestation
  • 🏢 Firm and practice area details
  • 💰 Rate and service information
  
  Indexes:
  • by_userId, by_barNumber (uniqueness)
  • by_practiceAreas, by_active (discovery)
end note

note left of AuditLog
  📋 Consent Audit Log - Compliance Trail
  
  Key Features:
  • 📊 Complete attestation event tracking
  • 🌐 IP address & timestamp capture
  • 📝 Extensible metadata for event context
  • ⚖️ PIPA/PIPEDA compliance support
  • 🔍 Forensic audit capabilities
  
  Indexes:
  • by_user (userId, timestamp) - user audit trail
  • by_event (event, timestamp) - event analysis
end note

' Data Flow Annotations
note as DataFlow
  🔄 Attestation Data Flow:
  
  1. User Registration:
  • User creates account with userType = "lawyer"
  • Optional lawyerProfile created for discovery
  
  2. Attestation Submission:
  • Lawyer submits attestation form
  • Attestation record created with userId reference
  • Audit log entry created for compliance
  
  3. Verification Process:
  • LSA API called to verify barNumber
  • lsaVerified flag updated on attestation
  • Additional audit log entry if verification fails
  
  4. Profile Integration:
  • LawyerProfile can reference attestation data
  • Professional standing influences profile visibility
  • Matching algorithms consider verification status
  
  🔒 Security Features:
  • All queries filtered by userId (row-level security)
  • Audit log provides complete compliance trail
  • No cross-user data access possible
  • Professional information properly segregated
end note

' Schema Validation Rules
note as ValidationRules
  ✅ Schema Validation Rules:
  
  Attestations Table:
  • userId must reference valid users._id
  • All boolean fields must be true for valid attestation
  • barNumber must match Alberta LSA format
  • legalName must be non-empty string
  • attestedAt auto-generated on creation
  
  Users Table:
  • userType must be one of: lawyer, end-user, admin
  • Only lawyers can create attestation records
  • Consent object required for PIPA compliance
  • Email unique across all users (if provided)
  
  LawyerProfiles Table:
  • userId must reference user with userType = "lawyer"
  • barNumber should match attestation.barNumber
  • verified flag independent of attestation.lsaVerified
  • practiceAreas array supports legal specialties
  
  ConsentAuditLog Table:
  • Immutable records (no updates allowed)
  • timestamp required for all entries
  • metadata flexible for different event types
  • userId enforces data ownership
end note

@enduml