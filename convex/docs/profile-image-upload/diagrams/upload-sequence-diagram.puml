@startuml Profile Image Upload - Complete Flow
<style>
' Professional Light Theme Configuration - Pure CSS Style
!$color_bg = "#ffffff"
!$color_bg_light = "#f8f9fa"
!$color_bg_lighter = "#e9ecef"
!$color_fg = "#212529"
!$color_fg_muted = "#6c757d"
!$color_primary = "#0066cc"
!$color_primary_light = "#4da6ff"
!$color_success = "#28a745"
!$color_warning = "#856404"
!$color_error = "#dc3545"
!$color_accent = "#6f42c1"

' Root document styling
document {
  BackGroundColor: $color_bg;
  FontColor: $color_fg;
  FontName: "Segoe UI", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", Arial, sans-serif;
  FontSize: 11;
}

' Sequence diagram specific styling
participant {
  BackGroundColor: $color_bg_light;
  LineColor: $color_primary;
  FontColor: $color_fg;
  FontSize: 10;
  LineThickness: 2;
  RoundCorner: 8;
  Padding: 8;
}

actor {
  BackGroundColor: $color_bg_lighter;
  LineColor: $color_accent;
  FontColor: $color_fg;
  FontSize: 10;
  LineThickness: 2;
}

' Arrow styling
arrow {
  LineColor: $color_success;
  FontColor: $color_warning;
  FontSize: 12;
  LineThickness: 2;
}

' Activation box styling
lifeLine {
  LineColor: $color_primary;
  LineThickness: 2;
}

' Note styling
note {
  BackGroundColor: $color_bg_lighter;
  LineColor: $color_accent;
  FontColor: $color_fg;
  FontSize: 9;
  LineThickness: 1;
  RoundCorner: 6;
  Padding: 6;
}

' Group/Alt styling
group {
  BackGroundColor: $color_bg_light;
  LineColor: $color_primary;
  FontColor: $color_fg;
  FontSize: 10;
  LineThickness: 2;
}
</style>

title Profile Image Upload - Complete User Flow

actor "üë§ User" as User
participant "üíª Frontend\n(React)" as Frontend
participant "üîß Convex API\n(users.ts)" as API
participant "üèóÔ∏è Model Layer\n(model/users.ts)" as Model
participant "üíæ Convex Storage" as Storage
participant "üóÑÔ∏è Database" as DB

note over User, DB
  **Profile Image Upload Architecture**
  
  Following Convex best practices with:
  ‚Ä¢ **API Layer**: Minimal frontend-exposed endpoints
  ‚Ä¢ **Model Layer**: Business logic and validation
  ‚Ä¢ **Direct Storage**: Optimized file upload flow
  ‚Ä¢ **Authentication**: Secure, user-scoped operations
end note

== Phase 1: User Initiates Upload ==

User -> Frontend : üìÅ Select image file
activate Frontend

note right of Frontend
  **Client-Side Validation**
  ‚Ä¢ File size (max 5MB)
  ‚Ä¢ File type (JPG, PNG, WebP)
  ‚Ä¢ Image dimensions check
  ‚Ä¢ User feedback during validation
end note

Frontend -> Frontend : üîç Validate file\n(size, type, format)

alt File validation passes
  Frontend -> Frontend : ‚úÖ Show "Uploading..." state
else File validation fails
  Frontend -> User : ‚ùå Show error message
  note right of Frontend
    **Common Validation Errors:**
    ‚Ä¢ "File size must be less than 5MB"
    ‚Ä¢ "Only JPEG, PNG, and WebP allowed"
    ‚Ä¢ "Please select a valid image file"
  end note
  User <-- Frontend : Error displayed
  deactivate Frontend
end

== Phase 2: Request Upload URL ==

Frontend -> API : üîó generateProfileImageUploadUrl()
activate API

note right of API
  **API Endpoint Security**
  ‚Ä¢ Requires user authentication
  ‚Ä¢ No parameters needed
  ‚Ä¢ Returns temporary upload URL
  ‚Ä¢ URL expires in ~1 hour
end note

API -> API : üîê Check user authentication
alt User authenticated
  API -> Storage : üì§ storage.generateUploadUrl()
  activate Storage
  Storage --> API : üîó Return temporary upload URL
  deactivate Storage
  API --> Frontend : ‚úÖ Upload URL returned
  deactivate API
else User not authenticated
  API --> Frontend : ‚ùå "Not authenticated" error
  deactivate API
  Frontend -> User : üîí Redirect to login
  deactivate Frontend
end

== Phase 3: Direct File Upload ==

Frontend -> Storage : üöÄ POST file to upload URL
activate Storage

note right of Storage
  **Direct Storage Upload**
  ‚Ä¢ Bypasses backend for efficiency
  ‚Ä¢ Automatic compression/optimization
  ‚Ä¢ Progress tracking available
  ‚Ä¢ Returns storage ID on success
end note

Storage -> Storage : üíæ Store file with metadata
alt Upload successful
  Storage --> Frontend : ‚úÖ { storageId: "st_abc123" }
  deactivate Storage
else Upload failed
  Storage --> Frontend : ‚ùå Upload error
  deactivate Storage
  Frontend -> User : ‚ö†Ô∏è "Upload failed, please retry"
  deactivate Frontend
end

== Phase 4: Update User Profile ==

Frontend -> API : üÜî updateProfileImage({ imageStorageId })
activate API

note right of API
  **Profile Update Security**
  ‚Ä¢ Validates user ownership
  ‚Ä¢ Updates lifecycle timestamps
  ‚Ä¢ Atomic database operation
  ‚Ä¢ Returns updated user object
end note

API -> API : üîê Check authentication
API -> Model : üìù updateUserProfileImage(ctx, userId, storageId)
activate Model

Model -> DB : üîç ctx.db.get(userId)
activate DB
DB --> Model : üë§ Current user data
Model -> Model : ‚úÖ Validate user exists
Model -> DB : üìù ctx.db.patch(userId, { image: storageId })
Model -> DB : üïê Update lifecycle.updatedAt
DB --> Model : ‚úÖ Update confirmed
deactivate DB

Model -> DB : üîÑ ctx.db.get(userId)
activate DB
DB --> Model : üë§ Updated user object
deactivate DB

Model --> API : ‚úÖ Updated user returned
deactivate Model
API --> Frontend : üë§ Updated user data
deactivate API

== Phase 5: Display New Image ==

Frontend -> API : üñºÔ∏è getProfileImageUrl({ imageStorageId })
activate API

note right of API
  **Image Display Optimization**
  ‚Ä¢ Public URL generation
  ‚Ä¢ Automatic caching
  ‚Ä¢ CDN distribution
  ‚Ä¢ Responsive image serving
end note

API -> Model : üîó getUserProfileImageUrl(ctx, storageId)
activate Model
Model -> Storage : üìé ctx.storage.getUrl(storageId)
activate Storage
Storage --> Model : üåê Public image URL
deactivate Storage
Model --> API : üîó Public URL returned
deactivate Model
API --> Frontend : üåê Image URL
deactivate API

Frontend -> Frontend : üñºÔ∏è Update UI with new image
Frontend -> User : ‚ú® Display success state
deactivate Frontend

note over User, DB
  **‚úÖ Upload Complete Successfully!**
  
  **What Happened:**
  1. ‚úÖ File validated on client
  2. ‚úÖ Temporary upload URL generated
  3. ‚úÖ File uploaded directly to storage
  4. ‚úÖ User profile updated with storage ID
  5. ‚úÖ Public URL generated for display
  
  **Security Measures Applied:**
  ‚Ä¢ üîê Authentication required for all mutations
  ‚Ä¢ üè∑Ô∏è Storage IDs are private references
  ‚Ä¢ üåê Public URLs are safe for display
  ‚Ä¢ üë§ User can only update their own profile
  
  **Performance Optimizations:**
  ‚Ä¢ ‚ö° Direct storage upload (no backend proxy)
  ‚Ä¢ üíæ Automatic image optimization
  ‚Ä¢ üöÄ CDN distribution for fast loading
  ‚Ä¢ üîÑ Minimal API calls required
end note

@enduml