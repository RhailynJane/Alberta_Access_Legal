@startuml Profile Image Upload - Error Handling Flow
<style>
' Professional Light Theme Configuration - Pure CSS Style
!$color_bg = "#ffffff"
!$color_bg_light = "#f8f9fa"
!$color_bg_lighter = "#e9ecef"
!$color_fg = "#212529"
!$color_fg_muted = "#6c757d"
!$color_primary = "#0066cc"
!$color_primary_light = "#4da6ff"
!$color_success = "#28a745"
!$color_warning = "#856404"
!$color_error = "#dc3545"
!$color_accent = "#6f42c1"

' Root document styling
document {
  BackGroundColor: $color_bg;
  FontColor: $color_fg;
  FontName: "Segoe UI", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", Arial, sans-serif;
  FontSize: 11;
}

' State styling
state {
  BackGroundColor: $color_bg_light;
  LineColor: $color_primary;
  FontColor: $color_fg;
  FontSize: 10;
  LineThickness: 2;
  RoundCorner: 8;
  Padding: 8;
}

' Error states get special coloring
state {
  BackGroundColor: #ffebee;
  LineColor: $color_error;
  FontColor: $color_fg;
  FontSize: 10;
  LineThickness: 2;
  RoundCorner: 8;
  Padding: 8;
}

' Success states
state {
  BackGroundColor: #e8f5e8;
  LineColor: $color_success;
  FontColor: $color_fg;
  FontSize: 10;
  LineThickness: 2;
  RoundCorner: 8;
}

' Arrow styling
arrow {
  LineColor: $color_success;
  FontColor: $color_warning;
  FontSize: 9;
  LineThickness: 2;
}

' Note styling
note {
  BackGroundColor: $color_bg_lighter;
  LineColor: $color_accent;
  FontColor: $color_fg;
  FontSize: 9;
  LineThickness: 1;
  RoundCorner: 6;
  Padding: 6;
}
</style>

title Profile Image Upload - Comprehensive Error Handling Strategy

[*] --> UserSelectsFile : User interaction

state UserSelectsFile {
  UserSelectsFile : üìÅ User picks image file
}

UserSelectsFile --> FileValidation : File selected

state FileValidation {
  [*] --> CheckFileExists
  CheckFileExists : File object exists?
  CheckFileExists --> CheckFileSize : File exists
  CheckFileExists --> NoFileError : No file
  
  CheckFileSize : Size < 5MB?
  CheckFileSize --> CheckFileType : Valid size
  CheckFileSize --> FileSizeError : Too large
  
  CheckFileType : JPEG/PNG/WebP?
  CheckFileType --> ValidationSuccess : Valid type
  CheckFileType --> FileTypeError : Invalid type
  
  state NoFileError #Pink {
    NoFileError : ‚ùå "Please select a file"
  }
  
  state FileSizeError #Pink {
    FileSizeError : ‚ùå "File size must be less than 5MB"
    note right : Max file size is configurable\nbut 5MB is recommended for UX
  }
  
  state FileTypeError #Pink {
    FileTypeError : ‚ùå "Only JPEG, PNG, and WebP allowed"
    note right : Prevents malicious file uploads\nand ensures compatibility
  }
  
  ValidationSuccess --> [*]
  NoFileError --> [*]
  FileSizeError --> [*] 
  FileTypeError --> [*]
}

FileValidation --> RetryFileSelection : Validation failed
FileValidation --> GetUploadURL : Validation passed

RetryFileSelection --> UserSelectsFile : User tries again

state GetUploadURL {
  GetUploadURL : üîó Request upload URL
}

GetUploadURL --> AuthCheck : API call made

state AuthCheck {
  [*] --> ValidateToken
  ValidateToken : User authenticated?
  ValidateToken --> AuthSuccess : Valid session
  ValidateToken --> AuthError : No/expired token
  
  state AuthError #Pink {
    AuthError : ‚ùå "Not authenticated"
    note right : User session expired\nor never logged in
  }
  
  AuthSuccess --> [*]
  AuthError --> [*]
}

AuthCheck --> RedirectLogin : Authentication failed
AuthCheck --> UploadFile : Authentication passed

RedirectLogin --> LoginPage : Navigate to login

state LoginPage {
  LoginPage : üîí User completes login
}

LoginPage --> GetUploadURL : Return after login

state UploadFile {
  UploadFile : üöÄ Upload to Convex Storage
}

UploadFile --> UploadValidation : File sent to storage

state UploadValidation {
  [*] --> NetworkCheck
  NetworkCheck : Network available?
  NetworkCheck --> StorageCheck : Connection OK
  NetworkCheck --> NetworkError : Connection failed
  
  StorageCheck : Storage quota OK?
  StorageCheck --> UploadSuccess : Space available
  StorageCheck --> StorageError : Quota exceeded
  
  state NetworkError #Pink {
    NetworkError : ‚ùå "Upload failed - check connection"
    note right : Network timeout\nor connectivity issues
  }
  
  state StorageError #Pink {
    StorageError : ‚ùå "Storage limit reached"
    note right : Convex storage quota\nexceeded (rare in practice)
  }
  
  UploadSuccess --> [*]
  NetworkError --> [*]
  StorageError --> [*]
}

UploadValidation --> RetryUpload : Upload failed
UploadValidation --> UpdateProfile : Upload successful

RetryUpload --> UploadFile : User retries

state UpdateProfile {
  UpdateProfile : üíæ Update user profile
}

UpdateProfile --> ProfileUpdate : Save storage ID

state ProfileUpdate {
  [*] --> DatabaseCheck
  DatabaseCheck : Database available?
  DatabaseCheck --> UpdateUser : DB operational
  DatabaseCheck --> DatabaseError : DB unavailable
  
  UpdateUser : User record exists?
  UpdateUser --> ProfileSuccess : Update successful
  UpdateUser --> UserNotFoundError : User missing
  
  state DatabaseError #Pink {
    DatabaseError : ‚ùå "Update failed - please try again"
    note right : Temporary database issues\nUser should retry
  }
  
  state UserNotFoundError #Pink {
    UserNotFoundError : ‚ùå "User account not found"
    note right : Rare edge case - user deleted\nduring upload process
  }
  
  ProfileSuccess --> [*]
  DatabaseError --> [*]
  UserNotFoundError --> [*]
}

ProfileUpdate --> RetryUpdate : Update failed
ProfileUpdate --> DisplayImage : Update successful

RetryUpdate --> UpdateProfile : Auto-retry or user action

state DisplayImage {
  DisplayImage : üñºÔ∏è Display new profile image
}

DisplayImage --> ImageDisplay : Get display URL

state ImageDisplay {
  [*] --> URLGeneration
  URLGeneration : Generate public URL
  URLGeneration --> DisplaySuccess : URL created
  URLGeneration --> URLError : URL generation failed
  
  state URLError #Pink {
    URLError : ‚ùå "Image temporarily unavailable"
    note right : Storage ID saved but\nURL generation failed\n(very rare)
  }
  
  DisplaySuccess --> [*]
  URLError --> [*]
}

ImageDisplay --> FinalSuccess : Display successful
ImageDisplay --> ShowPlaceholder : Display failed

state FinalSuccess #LightGreen {
  FinalSuccess : ‚úÖ Profile image updated successfully!
}

state ShowPlaceholder {
  ShowPlaceholder : üîÑ Show placeholder with retry option
}

ShowPlaceholder --> ImageDisplay : User retries display

FinalSuccess --> [*]

' Global error recovery note
note bottom
  **Error Recovery Strategies:**
  
  **Client-Side Errors (Immediate feedback):**
  ‚Ä¢ üìÅ **File Validation**: Show error immediately, allow new selection
  ‚Ä¢ üîê **Authentication**: Redirect to login, preserve state on return
  ‚Ä¢ üì∂ **Network Issues**: Show retry button, possibly auto-retry
  
  **Server-Side Errors (Graceful degradation):**
  ‚Ä¢ üíæ **Database Errors**: Auto-retry with exponential backoff
  ‚Ä¢ üè™ **Storage Errors**: Show clear message, suggest smaller file
  ‚Ä¢ üîó **URL Generation**: Show placeholder, retry in background
  
  **User Experience Principles:**
  ‚Ä¢ ‚ö° **Fast Feedback**: Validate on client before server calls
  ‚Ä¢ üîÑ **Easy Recovery**: Always provide retry mechanisms
  ‚Ä¢ üì± **Progressive Enhancement**: Core functionality works even with errors
  ‚Ä¢ üõ°Ô∏è **Security First**: Authentication errors redirect properly
  
  **Implementation Notes:**
  ‚Ä¢ All error states preserve user's current state
  ‚Ä¢ Retry mechanisms prevent infinite loops with exponential backoff
  ‚Ä¢ Error messages are user-friendly, not technical
  ‚Ä¢ Success path is optimized for happy case performance
end note

@enduml