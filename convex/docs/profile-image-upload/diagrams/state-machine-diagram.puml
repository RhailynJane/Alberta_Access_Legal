@startuml Profile Image Upload - UI State Machine
<style>
' Professional Light Theme Configuration - Pure CSS Style
!$color_bg = "#ffffff"
!$color_bg_light = "#f8f9fa"
!$color_bg_lighter = "#e9ecef"
!$color_fg = "#212529"
!$color_fg_muted = "#6c757d"
!$color_primary = "#0066cc"
!$color_primary_light = "#4da6ff"
!$color_success = "#28a745"
!$color_warning = "#856404"
!$color_error = "#dc3545"
!$color_accent = "#6f42c1"

' Root document styling
document {
  BackGroundColor: $color_bg;
  FontColor: $color_fg;
  FontName: "Segoe UI", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", Arial, sans-serif;
  FontSize: 11;
}

' State styling
state {
  BackGroundColor: $color_bg_light;
  LineColor: $color_primary;
  FontColor: $color_fg;
  FontSize: 10;
  LineThickness: 2;
  RoundCorner: 8;
  Padding: 8;
}

' Composite state styling
compositeState {
  BackGroundColor: $color_bg_lighter;
  LineColor: $color_accent;
  FontColor: $color_fg;
  FontSize: 10;
  LineThickness: 2;
  RoundCorner: 8;
}

' Arrow styling
arrow {
  LineColor: $color_success;
  FontColor: $color_warning;
  FontSize: 9;
  LineThickness: 2;
}

' Note styling
note {
  BackGroundColor: $color_bg_lighter;
  LineColor: $color_accent;
  FontColor: $color_fg;
  FontSize: 9;
  LineThickness: 1;
  RoundCorner: 6;
  Padding: 6;
}
</style>

title Profile Image Upload Component - UI State Machine

[*] --> Initializing : Component mounts

state Initializing {
  [*] --> LoadingUserData
  LoadingUserData : üîÑ Fetching user profile
  LoadingUserData --> InitComplete : User data loaded
  InitComplete --> [*]
}

Initializing --> Ready : Initialization complete

state Ready #LightBlue {
  Ready : üí§ Idle state
  Ready : Shows current image or placeholder
  Ready : Upload button enabled
  
  note right of Ready
    **UI Elements Visible:**
    ‚Ä¢ Current profile image OR placeholder
    ‚Ä¢ "Choose Image" button
    ‚Ä¢ Optional "Remove Image" button
    ‚Ä¢ No error/success messages
    
    **User Can:**
    ‚Ä¢ Click to select new image
    ‚Ä¢ Click to remove current image
    ‚Ä¢ Continue using app normally
  end note
}

Ready --> FileSelection : User clicks "Choose Image"
Ready --> RemovingImage : User clicks "Remove Image"

state FileSelection {
  FileSelection : üìÇ File picker dialog open
}

FileSelection --> Ready : User cancels selection
FileSelection --> Validating : User selects file

state Validating {
  Validating : üîç Validating selected file
  
  note right of Validating
    **Validation Checks:**
    ‚Ä¢ File exists and readable
    ‚Ä¢ File size ‚â§ 5MB
    ‚Ä¢ File type in [JPG, PNG, WebP]
    ‚Ä¢ File is valid image format
    
    **Duration:** ~50-100ms
  end note
}

Validating --> ValidationError : Validation fails
Validating --> Uploading : Validation passes

state ValidationError #Pink {
  ValidationError : ‚ùå File validation failed
  ValidationError : Shows specific error message
  ValidationError : Upload button disabled
  
  note right of ValidationError
    **Error Messages:**
    ‚Ä¢ "File size must be less than 5MB"
    ‚Ä¢ "Only JPEG, PNG, WebP allowed"
    ‚Ä¢ "Please select a valid image"
    
    **UI State:**
    ‚Ä¢ Error message prominently displayed
    ‚Ä¢ Previous image still shown
    ‚Ä¢ Can select new file
  end note
}

ValidationError --> Ready : User dismisses error
ValidationError --> FileSelection : User selects new file

state Uploading #LightYellow {
  [*] --> RequestingURL
  
  RequestingURL : üîó Getting upload URL
  RequestingURL --> UploadingFile : URL received
  RequestingURL --> UploadError : URL request failed
  
  UploadingFile : üöÄ Uploading to storage
  UploadingFile : Progress: 0-100%
  UploadingFile --> UpdatingProfile : Upload complete
  UploadingFile --> UploadError : Upload failed
  
  UpdatingProfile : üíæ Saving to user profile
  UpdatingProfile --> UploadSuccess : Profile updated
  UpdatingProfile --> UploadError : Profile update failed
  
  note right of Uploading
    **UI During Upload:**
    ‚Ä¢ Progress spinner/bar
    ‚Ä¢ "Uploading..." message
    ‚Ä¢ All buttons disabled
    ‚Ä¢ Cancel option (optional)
    
    **Progress Feedback:**
    ‚Ä¢ Stage 1: "Preparing upload..."
    ‚Ä¢ Stage 2: "Uploading... 45%"
    ‚Ä¢ Stage 3: "Finalizing..."
  end note
}

Uploading --> UploadError : Any step fails
Uploading --> UploadSuccess : All steps complete

state UploadError #Pink {
  UploadError : ‚ùå Upload process failed
  UploadError : Shows error with retry option
  
  note right of UploadError
    **Error Scenarios:**
    ‚Ä¢ Network connection failed
    ‚Ä¢ Authentication expired
    ‚Ä¢ Storage quota exceeded
    ‚Ä¢ Server temporarily unavailable
    
    **UI Elements:**
    ‚Ä¢ Clear error description
    ‚Ä¢ "Try Again" button
    ‚Ä¢ "Cancel" button
    ‚Ä¢ Previous image still shown
  end note
}

UploadError --> Ready : User cancels
UploadError --> Uploading : User retries upload

state UploadSuccess #LightGreen {
  UploadSuccess : ‚úÖ Upload completed successfully
  UploadSuccess : Shows success message briefly
  UploadSuccess : New image displayed
  
  note right of UploadSuccess
    **Success Feedback:**
    ‚Ä¢ Brief success message/toast
    ‚Ä¢ New image immediately visible
    ‚Ä¢ Smooth transition animation
    ‚Ä¢ Remove button now available
    
    **Duration:** 2-3 seconds
  end note
}

UploadSuccess --> Ready : Success message fades

state RemovingImage #LightYellow {
  RemovingImage : üóëÔ∏è Removing profile image
  RemovingImage : Confirming with server
  
  note right of RemovingImage
    **Removal Process:**
    ‚Ä¢ Optional confirmation dialog
    ‚Ä¢ API call to clear image
    ‚Ä¢ Immediate UI feedback
    ‚Ä¢ Fallback to placeholder
    
    **Duration:** ~500ms
  end note
}

RemovingImage --> RemovalError : Removal fails
RemovingImage --> RemovalSuccess : Removal succeeds

state RemovalError #Pink {
  RemovalError : ‚ùå Failed to remove image
  RemovalError : Shows error message
  
  note right of RemovalError
    **Error Handling:**
    ‚Ä¢ Keep current image visible
    ‚Ä¢ Show "Try again" option
    ‚Ä¢ Log error for debugging
  end note
}

RemovalError --> Ready : Error resolved

state RemovalSuccess #LightGreen {
  RemovalSuccess : ‚úÖ Image removed successfully
  RemovalSuccess : Shows placeholder image
  
  note right of RemovalSuccess
    **UI Changes:**
    ‚Ä¢ Image replaced with placeholder
    ‚Ä¢ Remove button hidden
    ‚Ä¢ Brief success message
  end note
}

RemovalSuccess --> Ready : Success complete

' Authentication state handling
Ready --> AuthenticationRequired : User not authenticated
Uploading --> AuthenticationRequired : Auth expires during upload

state AuthenticationRequired #Orange {
  AuthenticationRequired : üîí Authentication required
  AuthenticationRequired : Shows login prompt/redirect
  
  note right of AuthenticationRequired
    **Authentication Handling:**
    ‚Ä¢ Preserve current UI state
    ‚Ä¢ Show login dialog OR redirect
    ‚Ä¢ Resume operation after login
    ‚Ä¢ Clear sensitive data if needed
  end note
}

AuthenticationRequired --> Ready : User logs in
AuthenticationRequired --> [*] : User navigates away

' Global error recovery
state ErrorRecovery {
  [*] --> DetectError
  DetectError : üîç Unexpected error detected
  DetectError --> ShowFallback : Error confirmed
  ShowFallback : üõ°Ô∏è Show fallback UI
  ShowFallback --> [*] : Recovery complete
}

ErrorRecovery --> Ready : Component recovers

note bottom
  **State Management Implementation Notes:**
  
  **State Variables (React useState):**
  ```javascript
  const [uploadState, setUploadState] = useState('ready');
  const [error, setError] = useState(null);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [currentImage, setCurrentImage] = useState(user?.image);
  ```
  
  **Key State Transitions:**
  ‚Ä¢ üîÑ **Loading States**: Always show feedback for operations > 200ms
  ‚Ä¢ ‚ùå **Error States**: Always provide recovery path + clear messaging
  ‚Ä¢ ‚úÖ **Success States**: Brief confirmation before returning to ready
  ‚Ä¢ üîí **Auth States**: Preserve state across authentication flows
  
  **Performance Optimizations:**
  ‚Ä¢ Debounced validation for multiple file selections
  ‚Ä¢ Optimistic UI updates where safe
  ‚Ä¢ Background retries for transient failures
  ‚Ä¢ Memory cleanup on component unmount
  
  **Accessibility Considerations:**
  ‚Ä¢ Screen reader announcements for state changes
  ‚Ä¢ Keyboard navigation for all interactive elements
  ‚Ä¢ Focus management during state transitions
  ‚Ä¢ High contrast support for error/success states
end note

@enduml